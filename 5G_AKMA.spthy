theory 5G_AKMA
/*
Program: 5G AKMA (Authentication and Key Agreement for Application in 5G system)
Based on: Security Architecture and Procedures for 5G System: 3GPP TS 33.535 V17.1.0(2021-04)
Notations: UE: User's Equipment, user of the service, containing UICC and ME
           HN: Home Network, mobile network provider
           UDM: Unified Data Management
           AUSF: Authentication Server Function
           AAnF: AKMA Anchor Function
           SUPI: Subscription Permanent Identifier
           A-KID = <A_TID, ~id_HN>: AKMA Key Identifier. Actually, A-KID is globally identifier in Network Access Identifier (NAI) format, 
              i.e., username@realm. The username part includes the Routing Identifier and a temporary UE identifier. The realm part includes HN Identifier.
           AF_ID: Identifier of AF

Protocol: 0.UE --> HN: Primary Authentication(omitted)
          1.UE and AUSF generate K_AKMA and A-KID, i.e., <A_TID, ~id_HN> from K_AUSF, UE also generates K_AF.
          2.AUSF --> AAnF: SUPI, <A_TID, ~id_HN>, K_AKMA
          3.UE --> AF: <A_TID, ~id_HN>
          4.AF --> AAnF: <A_TID, ~id_HN>, AF_ID
          5.AAnF generates K_AF from K_AKMA
          6.AAnF --> AF: K_AF, K_AF exptime, [other parameters]
          7.AF --> UE: Implict authentication from AF
          8.UE --> AF: Implict authentication from UE
          END

Assumption and Notes: 
1. UE and HN come to an agreement on parameters in KDFs.
2. We suppose the AF is located outside the operator network, while actually AF is communicating with NEF in HN. 
   We omit the existence of NEF and supposed that AF(outside) communicates with HN by AAnF.
3. The authentication between UE and HN is primary authentication(like 5G AKA), beyond this protocol.
4. The authentication between HN and AF is beyond the whole content. 
   In 5G AKA, there is a private channel between HN and SN, which is a standard, secure channel abstraction, 
   as previously used in work by Basin, Radomirovic and Schmid: Modeling Human Errors in Security Protocols(CSF 2016).   
   Therefore, we use this abstraction to model the channel between HN and AF.
   Based on TS33.501, mutual authentication between AAnF and AF occurs before running AKMA using the TLS protocol,
   which provides integrity, replay, and confidentiality protection of communication along a private channel.
5. In our work, as AUSF, AAnF(and some functions are omitted like UDM, NEF) are located in HN(Home Network), we supposed 
   the messages translated between AUSF and AAnF is secret.
6. The channel between AF and UE is public channel.

Channels:	AAnF <-> AF  [.<->. is authenticated, confidential, replay protected, order-preserving, binding]

Prepared: K_AUSF between UE and HN, SUPI and K (belong to UE) between UE and HN
*/

begin

builtins: asymmetric-encryption, multiset

predicates: Equal(x, y) <=> x = y
            , NotEqual(x, y) <=> Â¬(x = y)

functions: 
KDF_AKMA/3,  // KDF to generate K_AKMA
KDF_A_TID/3,   // KDF to generate <A_TID, ~id_HN>
KDF_AF/2,  // KDF to generate K_AF
KDF_AUSF/3,  // KDF to generate K_AUSF
f/2  // implicit key confirmation function


/************************************/
/*         Initialization           */
/************************************/
// Channel between HN and AF
// This is a standard, secure channel abstraction, as previously used in work...
rule send_secure:
	[SndS(~cid,A,B,m)]	// ~cid denotes a channel identifier: should always be a fresh name (possibly created by the attacker)
	-->
	[Sec(~cid,A,B,m)]

rule receive_secure:
	[Sec(~cid,A,B,m)]
	-->
	[RcvS(~cid,A,B,m)]

rule secureChannel_compromised_in:
	[In(<~cid,A,B,x>)]	// attacker can learn cid with secureChannel_compromised_out
	--[
		Reveal(A,'secureChannel'),
		Injected(x)
	]->
	[Sec(~cid,A,B,x)]

rule secureChannel_compromised_out:
	[Sec(~cid,A,B,m)]
	--[Reveal(B,'secureChannel')]->
	[Out(<~cid, m>)]

// Initialize a home network    Probably not need, but for completeness
rule Init_HN:
	[Fr(~sk_HN),
	 Fr(~id_HN)]
	--[ HomeNet(~id_HN) ]->
	[!HN_key(~id_HN, ~sk_HN),
   !HN(~id_HN),
	 !Pk(~id_HN, pk(~sk_HN)),
	 Out(<~id_HN, pk(~sk_HN)>)]

// Initialize a service provider AF 
// AF_ID = FQDN of the AF || Ua* security protocol identifier, 
// where the Ua* security protocol identifier is specified as Ua security protocol identifier in Annex H of TS 33.220 [4].
rule Init_AF:
  [Fr(~id_AF)]
  --[ ServicePro(~id_AF) ]->
  [!AF(~id_AF),
   Out(~id_AF)]

// Initialize Subscription
rule Subscribe_UE:
  [Fr(~SUPI),
   Fr(~K),   
   !HN(~id_HN)]       
  --[ Subscribe(~SUPI, ~id_HN) ]->  //
  [ !Sub(~SUPI, ~id_HN),
  !Sub_K(~SUPI, ~id_HN, ~K) ]


/************************************/
/*        5G AKMA  Protocols        */
/************************************/
// Primary Authentication, which is omitted in 5G_AKMA
// Only for the result Key K_AUSF used in 5G_AKMA
rule Init_Pri_Auth:
  let
    K_AUSF = KDF_AUSF(~K, ~id_HN, ~R)
  in
  [Fr(~R),    // a random number in 5G AKA
   !Sub_K(~SUPI, ~id_HN, ~K)]
  --[ Pri_Auth(K_AUSF, ~SUPI, ~id_HN) ]->  
  [ UE_Auth(~SUPI, K_AUSF, ~id_HN),
    AUSF(~SUPI, ~id_HN, K_AUSF) ]


// Key Leakage
// Compromised Subscriptions (SUPI of UE)
rule Reveal_SUPI:
	[!Sub(~SUPI, ~id_HN)]
	--[
		// Security properties
		Reveal(~SUPI, <'SUPI', ~SUPI>),
		Reveal(~id_HN, <'SUPI', ~SUPI>)    // for every component
	]->
	[Out(~SUPI)]

// Compromised Subscriptions (K of UE)
rule Reveal_K:
	[!Sub_K(~SUPI, ~id_HN, ~K)]
	--[
		// Security properties
		Reveal(~SUPI, <'K', ~K>),
		Reveal(~id_HN, <'K', ~K>)    // for every component
	]->
	[Out(~K)]

// Compromised home network (private asymmetric key sk_HN)  // not need
rule Reveal_sk_HN:
	[!HN_key(~idHN, ~sk_HN)]
	--[
		// Security properties
		Reveal(~idHN, <'skHN', ~sk_HN>)
	]->
	[Out(~sk_HN)]


// Protocol Rules
// UE: Generate K_AKMA, A-KID
rule AKMA_Material_Generation_UE:
  let
  K_AKMA = KDF_AKMA(K_AUSF, ~SUPI, $C_1)
  A_TID = KDF_A_TID(K_AUSF, ~SUPI, $C_2)
  in
  [ UE_Auth(~SUPI, K_AUSF, ~id_HN) ]
  --[ 
      //Executability
      Generation_UE(~SUPI)
  ]->
  [ UE_Auth_KEY(~SUPI, K_AUSF, K_AKMA, <A_TID, ~id_HN>) ]

// AUSF: Generate K_AKMA, A-KID
rule AKMA_Material_Generation_AUSF:
  let
  K_AKMA = KDF_AKMA(K_AUSF, ~SUPI, $C_1)
  A_TID = KDF_A_TID(K_AUSF, ~SUPI, $C_2)
  in
  [ AUSF(~SUPI, ~id_HN, K_AUSF) ]
  --[ 
      //Executability
      Generation_HN(~id_HN) 
  ]->
  [ AUSF_KEY(~SUPI, K_AUSF, ~id_HN, K_AKMA, <A_TID, ~id_HN>)]

// AUSF --> AAnF: Naanf_AKMA_AnchorKey_Register Request
rule K_AKMA_Register:
  [ AUSF_KEY(~SUPI, K_AUSF, ~id_HN, K_AKMA, <A_TID, ~id_HN>)]
  --[
      //Executability
      K_AKMA_Register(~id_HN)
  ]->
  [ AAnF(~id_HN, ~SUPI, <A_TID, ~id_HN>, K_AKMA) ]

// AAnF deletes the old K_AKMA and <A_TID, ~id_HN>, and then response
// AAnF --> AUSF : Naanf_AKMA_Anchor_Register Response
rule Re_pri_auth:
  [ AAnF1(~id_HN, ~SUPI, <A_TID, ~id_HN>, K_AKMA),
    AUSF_KEY(~SUPI, K_AUSF, ~id_HN, K_AKMA_new, <A_TID_new, ~id_HN>) ]
  --[
      //restriction
      _restrict(NotEqual(K_AKMA_new, K_AKMA)),
      _restrict(NotEqual(A_TID_new, A_TID)),
      //Executability
      K_AKMA_Re_Register(~id_HN)
  ]->
  [ AAnF(~id_HN, ~SUPI, <A_TID_new, ~id_HN>, K_AKMA_new) ]

// UE: Generate K_AF
rule K_AF_Generation_UE:
  let
  K_AF = KDF_AF(K_AKMA, ~id_AF)  
  in
  [ UE_Auth_KEY(~SUPI, K_AUSF, K_AKMA, <A_TID, ~id_HN>),
    !AF(~id_AF) ]
  --[
        //Executability
        Session_Key_Generation_UE(~SUPI)
  ]->
  [ UE_KEY(~SUPI, K_AUSF, K_AKMA, <A_TID, ~id_HN>, K_AF, ~id_AF) ]

// AAnF: Generate K_AF
rule K_AF_Generation_AAnF:
  let
  K_AF = KDF_AF(K_AKMA, ~id_AF)  
  in
  [ AAnF(~id_HN, ~SUPI, <A_TID, ~id_HN>, K_AKMA),
    !AF(~id_AF) ]
  --[
        //Executability
        Session_Key_Generation_AAnF(~id_HN)
  ]->
  [ AAnF_KEY(~id_HN, ~SUPI, <A_TID, ~id_HN>, K_AKMA, K_AF, ~id_AF),
    AAnF1(~id_HN, ~SUPI, <A_TID, ~id_HN>, K_AKMA) ]

// UE --> AF: Application Session Establishment Request
rule UE_send_request:
  [ UE_KEY(~SUPI, K_AUSF, K_AKMA, <A_TID, ~id_HN>, K_AF, ~id_AF), 
    !Sub(~SUPI, ~id_HN),
    !AF(~id_AF) ]
  --[
      //Executability
      UE_send_request(~SUPI),
      //Security
      Secret(<'A_KID', <A_TID, ~id_HN>>, ~SUPI), 
      Running(<A_TID, ~id_HN>, ~id_AF, <'UE', 'AF', <'A_KID', <A_TID, ~id_HN>>>),
      Running(~SUPI, ~id_HN, <'UE', 'HN', <'A_KID', <A_TID, ~id_HN>>>), 
      Running(<A_TID, ~id_HN>, ~id_AF, <'UE', 'AF', <'K_AF', K_AF>>),
      Honest(<A_TID, ~id_HN>),
      Honest(~id_AF),
      Honest(~id_HN)  
  ]->
  [ Out(<A_TID, ~id_HN>),
    UE_KEY1(~SUPI, K_AUSF, K_AKMA, <A_TID, ~id_HN>, K_AF, ~id_AF) ]

// AF --> AAnF: Naanf_AKMA_ApplicationKey_Get_Request
rule AF_send_KeyRequest:
  let
    msg = < <A_TID, ~id_HN>, ~id_AF >
  in
  [ !AF(~id_AF),
    In(<A_TID, ~id_HN>),
    Fr(~cid)
     ]
  --[
      //Executability
      AF_send_KeyRequest(~id_AF),
      //Security
      Secret(<'A_KID', <A_TID, ~id_HN>>, ~id_AF),
      Commit(~id_AF, <A_TID, ~id_HN>, <'UE', 'AF', <'A_KID', <A_TID, ~id_HN>>>),
      Running(~id_AF, ~id_HN, <'AF', 'HN', <'A_KID', <A_TID, ~id_HN>>>),
      Running(~id_AF, ~id_HN, <'AF', 'HN', <'id_AF', ~id_AF>>),
      Honest(~id_AF),
      Honest(<A_TID, ~id_HN>),
      Honest(~id_HN)
  ]->
  [ SndS(~cid, ~id_AF, ~id_HN, msg), 
    AF_request(~id_AF, <A_TID, ~id_HN>)  ]

// AAnF --> AF: Naanf_AKMA_Application_Get_Response
rule AAnF_Send_K_AF:
  let
    session_msg = < K_AF, ~exptime >
    // session_msg = < K_AF, ~exptime, <A_TID, ~id_HN> > 
    msg_In = < <A_TID, ~id_HN>, ~id_AF >
  in
  [ Fr(~exptime),  
    AAnF_KEY(~id_HN, ~SUPI, <A_TID, ~id_HN>, K_AKMA, K_AF, ~id_AF), 
    !AF(~id_AF),
    RcvS(~cid, ~id_AF, ~id_HN, msg_In)
     ]
  --[ 
      //restriction
      _restrict(Equal(fst(msg_In), <A_TID, ~id_HN>)), 
      //Executability
      HN_Response(~id_HN, K_AF),
      //Security
      Secret(<'K_AF', K_AF>, ~id_HN),
      Commit(~id_HN, ~SUPI, <'UE', 'HN', <'A_KID', <A_TID, ~id_HN>>>),
      Commit(~id_HN, ~id_AF, <'AF', 'HN', <'A_KID', <A_TID, ~id_HN>>>),
      Commit(~id_HN, ~id_AF, <'AF', 'HN', <'id_AF', ~id_AF>>),
      Running(~id_HN, ~id_AF, <'HN', 'AF', <'K_AF', K_AF>>),
      Running(~id_HN, ~id_AF, <'HN', 'AF', <'K_AF_exptime', ~exptime>>),
      Honest(~id_HN),
      Honest(~id_AF)    
  ]->
  [ SndS(~cid, ~id_HN, ~id_AF, session_msg) ]

// Application Session Establishment Response
// AF --> UE: for impliclit authentication
rule AF_Response_Key:
  let
    confmess1 = f(K_AF, 'AF')
    msg_IN = < K_AF, ~exptime >
    // msg_IN = < K_AF, ~exptime, <A_TID, ~id_HN> >
  in
  [ RcvS(~cid, ~id_HN, ~id_AF, msg_IN), 
    AF_request(~id_AF, <A_TID, ~id_HN>) ]
  --[
      //Executability
      AF_session_response(~id_AF, K_AF),
      //Security
      Commit(~id_AF, <A_TID, ~id_HN>, <'UE', 'AF', <'K_AF', K_AF>>),
      Commit(~id_AF, ~id_HN, <'HN', 'AF', <'K_AF', K_AF>>),
      Commit(~id_AF, ~id_HN, <'HN', 'AF', <'K_AF_exptime', ~exptime>>),
      Honest(~id_AF),
      Honest(~id_HN),
      Honest(<A_TID, ~id_HN>)
  ]->
  [ Out(confmess1),
    AF_Confirmation(~id_AF, K_AF, <A_TID, ~id_HN>) ]

// implicit key confirmation
// UE --> AF: UE receives key confirmation from AF
rule UE_Key_Confirmation:
  let
    confmess2 = f(K_AF, 'UE')
  in
  [ In(f(K_AF, 'AF')),
    UE_KEY1(~SUPI, K_AUSF, K_AKMA, <A_TID, ~id_HN>, K_AF, ~id_AF),
    !AF(~id_AF) ]
  --[
      //Security
      Confirmation(<'UE',~SUPI>, <'AF', ~id_AF>, <'UE', 'AF', <'K_AF', K_AF>>),
      Honest(~id_AF),
      Honest(~SUPI),
      Honest(~id_HN),
      //Executability
      UE_Key_Confirmation(~SUPI, K_AF)
  ]->
  [ Out(confmess2) ]

// AF --> UE: AF receives key confirmation from UE
rule AF_Key_Confirmation:
  [ In(f(K_AF, 'UE')), 
    AF_Confirmation(~id_AF, K_AF, <A_TID, ~id_HN>) ]
  --[
      //Security
      Confirmation(<'AF', ~id_AF>, <'UE', <A_TID, ~id_HN>>, <'UE', 'AF', <'K_AF', K_AF>>),
      Honest(~id_AF),
      Honest(<A_TID, ~id_HN>),
      Honest(~id_HN),
      //Executability
      End_protocol(~id_AF, K_AF) 
  ]->
  []


/************************************/
/*           Properties             */
/************************************/
// Properties
lemma Protocol_executable:
    exists-trace
    "Ex A B C m #i1 #i2 #i3 #i4 #i5 #i6 #i7 #i8 #i9 #i10 #i11. (Generation_UE(A) @i1 &
                                                               Generation_HN(B) @i2 &
                                                               K_AKMA_Register(B) @i3 &
                                                               Session_Key_Generation_UE(A) @i4 &
                                                               Session_Key_Generation_AAnF(B) @i5 &
                                                               UE_send_request(A) @i6 &
                                                               AF_send_KeyRequest(C) @i7 &
                                                               HN_Response(B, m) @i8 &
                                                               AF_session_response(C, m) @i9 &
                                                               UE_Key_Confirmation(A, m) @i10 &
                                                               End_protocol(C, m) @i11)
  
    "

lemma Protocol_executable_Reprimary:
    exists-trace
    "Ex A B C m #i1 #i2 #i3 #i4 #i5 #i6 #i7 #i8 #i9 #i10 #i11 #i12.  Generation_UE(A) @i1 &
                                                                     Generation_HN(B) @i2 &
                                                                     K_AKMA_Register(B) @i3 &
                                                                     K_AKMA_Re_Register(B) @i4 &
                                                                     Session_Key_Generation_UE(A) @i5 &
                                                                     Session_Key_Generation_AAnF(B) @i6 &
                                                                     UE_send_request(A) @i7 &
                                                                     AF_send_KeyRequest(C) @i8 &
                                                                     HN_Response(B, m) @i9 &
                                                                     AF_session_response(C, m) @i10 &
                                                                     UE_Key_Confirmation(A, m) @i11 &
                                                                     End_protocol(C, m) @i12
  
    "

// Weak agreement between UE and AF
lemma weakagreement_UE_AF:
    all-traces
	  " All A B t #i. Commit(A, B, <'UE', 'AF', t>)@i
			==> (Ex t2 #j. Running(B, A, t2)@j)
			    | (Ex X m #r. Reveal(X, m)@r & Honest(X)@i) | (Ex D #l. Reveal(D, 'secureChannel')@l & Honest(D) @i)"

// Weak agreement between UE and AF(another form)
lemma weak_agreement:
    all-traces
    "All A B t1 #i. Confirmation(<'AF', A>, <'UE', B>, t1) @i 
    ==> (Ex t2 #j . Running(B, A, t2) @j
        & j < i) 
        | (Ex D m #l. Reveal(D, m) @l & Honest(D) @i )"

// Weak agreement between AF and UE(make no sense, not mentioned in the paper)
lemma weakagreement_AF_UE:
    all-traces
	  " All A B t #i. Commit(A, B, <'AF', 'UE', t>)@i
			==> (Ex t2 #j. Running(B, A, t2)@j)
			    | (Ex X m #r. Reveal(X, m)@r & Honest(X)@i) | (Ex D #l. Reveal(D, 'secureChannel')@l & Honest(D) @i)"

// Weak agreement between AF and HN
lemma weakagreement_AF_HN:
    all-traces
	  " All A B t #i. Commit(A, B, <'AF', 'HN', t>)@i
			==> (Ex t2 #j. Running(B, A, t2)@j)
			    | (Ex X m #r. Reveal(X, m)@r & Honest(X)@i) | (Ex D #l. Reveal(D, 'secureChannel')@l & Honest(D) @i)"

// Weak agreement between HN and AF
lemma weakagreement_HN_AF:
    all-traces
	  " All A B t #i. Commit(A, B, <'HN', 'AF', t>)@i
			==> (Ex t2 #j. Running(B, A, t2)@j)
			    | (Ex X m #r. Reveal(X, m)@r & Honest(X)@i) | (Ex D #l. Reveal(D, 'secureChannel')@l & Honest(D) @i)"

// Weak agreement between UE and HN
lemma weakagreement_HN_UE:
    all-traces
	  " All A B t #i. Commit(A, B, <'HN', 'UE', t>)@i
			==> (Ex t2 #j. Running(B, A, t2)@j)
			    | (Ex X m #r. Reveal(X, m)@r & Honest(X)@i) | (Ex D #l. Reveal(D, 'secureChannel')@l & Honest(D) @i) "

// Weak agreement between UE and HN(make no sense, not mentioned in the paper)
lemma weakagreement_UE_HN:
    all-traces
	  " All A B t #i. Commit(A, B, <'UE', 'HN', t>)@i
			==> (Ex t2 #j. Running(B, A, t2)@j)
			    | (Ex X m #r. Reveal(X, m)@r & Honest(X)@i) | (Ex D #l. Reveal(D, 'secureChannel')@l & Honest(D) @i) "

// Non-injective agreement between AF and UE (agreeing on the target session key K_AF)
lemma Non_injective_agreement:
    all-traces
    "All A B t #i. Confirmation(<'AF', A>, <'UE', B>, <'UE', 'AF', <'K_AF', t>>) @i 
    ==> (Ex #j . Running(B, A, <'UE', 'AF', <'K_AF', t>>) @j
        & j < i) 
        | (Ex D m #l. Reveal(D, m) @l & Honest(D) @i )
        | (Ex D #l. Reveal(D, 'secureChannel')@l & Honest(D) @i)
    "

// Confidentiality of K_AF
lemma secure_K_AF:
    all-traces
    " All n A #i. Secret(<'K_AF', n>, A) @i 
      ==>(not (Ex #j. K(n)@j )) | (Ex X data #r. Reveal(X, data) @r & Honest(X)@i) 
         | (Ex D #l. Reveal(D, 'secureChannel')@l & Honest(D) @i)"

// Confidentiality of K-AID
lemma secure_A_KID:
    all-traces
    " All n A #i. Secret(<'A_KID', n>, A) @i 
      ==>(not (Ex #j. K(n)@j )) | (Ex X data #r. Reveal(X, data) @r & Honest(X)@i) 
         | (Ex D #l. Reveal(D, 'secureChannel')@l & Honest(D) @i)"

// Non-injective agreement between AF and UE (agreeing on the target session key K_AF, not mentioned in the paper)
lemma Injective_agreement:
    all-traces
    "All A B t #i. Confirmation(<'AF', A>, <'UE', B>, <'UE', 'AF', <'K_AF', t>>) @i 
    ==> (Ex #j. Running(B, A, <'UE', 'AF', <'K_AF', t>>) @j
        & j < i
        & not(Ex A2 B2 #i2. Confirmation(<'AF', A2>, <'UE', B2>, <'UE', 'AF', <'K_AF', t>>) @i2 & not(#i2 = #i)))
        | (Ex D m #l. Reveal(D, m) @l & Honest(D) @i )
        | (Ex D #l. Reveal(D, 'secureChannel')@l & Honest(D) @i)
    "

end

